#!/usr/bin/env elixir

# Problem 2:
# Each new term in the Fibonacci sequence is generated by adding the previous
# two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed
# four million, find the sum of the even-valued terms.

defmodule Euler do
  def fibonacci(0),            do: 1
  def fibonacci(1),            do: 2
  def fibonacci(n) when n > 1, do: fibonacci(n-1) + fibonacci(n-2)

  defp fib_tr(a, b, n) do
    case n do
      0 ->
        a
      _ ->
        fib_tr(b, a+b, n-1)
    end
  end
  def fib(n), do: fib_tr(0, 1, n)
end

0..40
|> Enum.take_every(3) # Even-valued fibonacci values
|> Enum.map(&Euler.fib/1)
|> Enum.take_while(fn (n) -> n < 4_000_000 end)
|> Enum.sum()
|> IO.puts()
